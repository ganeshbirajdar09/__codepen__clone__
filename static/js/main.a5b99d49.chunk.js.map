{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","App.js","index.js"],"names":["Editor","displayName","language","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","theme","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","javascript","setJavascript","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RA+CeA,EAnCA,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC9C,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAKA,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACGP,EACD,wBACEQ,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAMH,GAAQ,SAACI,GAAD,OAAeA,MAHxC,SAKE,cAAC,IAAD,CAAiBC,KAAMN,EAAOO,IAAgBC,WAGlD,cAAC,aAAD,CAEEC,eAjBe,SAACC,EAAQC,EAAMd,GAClCC,EAASD,IAiBLA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMnB,EACNoB,aAAa,EACbC,MAAO,kBClBFC,EAlBS,SAACC,EAAKC,GAC5B,IAAMC,EAHI,gBAGmBF,EAC7B,EAA0BpB,oBAAS,WACjC,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EAA0BG,KAAKC,MAAMJ,GACb,oBAAjBF,EACFA,IAEAA,KANX,mBAAOvB,EAAP,KAAc8B,EAAd,KAaA,OAHAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MAChD,CAACwB,EAAaxB,IACV,CAACA,EAAO8B,IC0CFI,EAxDH,WACV,MAAwBb,EAAgB,OAAQ,IAAhD,mBAAOc,EAAP,KAAaC,EAAb,KACA,EAAsBf,EAAgB,MAAO,IAA7C,mBAAOgB,EAAP,KAAYC,EAAZ,KACA,EAAoCjB,EAAgB,aAAc,IAAlE,mBAAOkB,EAAP,KAAmBC,EAAnB,KACA,EAA4BnB,EAAgB,IAA5C,mBAAOoB,EAAP,KAAeC,EAAf,KAgBA,OAdAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,wBAAD,OAEJL,EAFI,6BAGLF,EAHK,8BAIHI,EAJG,4BAMR,KACH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAKb,qCACE,sBAAKlC,UAAU,gBAAf,UACE,cAAC,EAAD,CACEN,SAAS,MACTD,YAAY,OACZE,MAAOmC,EACPlC,SAAUmC,IAEZ,cAAC,EAAD,CACErC,SAAS,MACTD,YAAY,MACZE,MAAOqC,EACPpC,SAAUqC,IAEZ,cAAC,EAAD,CACEvC,SAAS,aACTD,YAAY,aACZE,MAAOuC,EACPtC,SAAUuC,OAGd,qBAAKnC,UAAU,OAAf,SACE,wBACEoC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eCjDjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a5b99d49.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/mode/xml/xml\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/mode/css/css\";\r\n/** Text editor - we can control the code editor with our own onchange */\r\nimport { Controlled as ControlledEditor } from \"react-codemirror2-react-17\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Editor = ({ displayName, language, value, onChange }) => {\r\n  const [open, setOpen] = useState(true);\r\n\r\n  const handleChange = (editor, data, value) => {\r\n    onChange(value);\r\n  };\r\n  return (\r\n    <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\r\n      <div className=\"editor-title\">\r\n        {displayName}\r\n        <button\r\n          type=\"button\"\r\n          className=\"expand-collapse-btn\"\r\n          onClick={() => setOpen((prevOpen) => !prevOpen)}\r\n        >\r\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\r\n        </button>\r\n      </div>\r\n      <ControlledEditor\r\n        /**similar to onChange */\r\n        onBeforeChange={handleChange}\r\n        value={value}\r\n        className=\"code mirror wrapper\"\r\n        options={{\r\n          lineWrapping: true,\r\n          lint: true,\r\n          mode: language,\r\n          lineNumbers: true,\r\n          theme: \"material\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst PREFIX = `codepen-clone`;\r\n\r\nconst useLocalStorage = (key, initialValue) => {\r\n  const prefixedKey = PREFIX + key;\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey);\r\n    if (jsonValue != null) return JSON.parse(jsonValue);\r\n    if (typeof initialValue === \"function\") {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n  }, [prefixedKey, value]);\r\n  return [value, setValue];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import \"./App.css\";\nimport React, { useEffect } from \"react\";\nimport Editor from \"./components/Editor\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\n\nconst App = () => {\n  const [html, setHtml] = useLocalStorage(\"html\", \"\");\n  const [css, setCss] = useLocalStorage(\"css\", \"\");\n  const [javascript, setJavascript] = useLocalStorage(\"javascript\", \"\");\n  const [srcDoc, setSrcDoc] = useLocalStorage(\"\");\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n  <html>\n  <style>${css}</style>\n  <body>${html}</body>\n  <script>${javascript}</script>\n  </html>`);\n    }, 250);\n    return () => clearTimeout(timeout);\n  }, [html, css, javascript]);\n\n  /**Rendering the code in the iframe below */\n\n  return (\n    <>\n      <div className=\"pane top pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n        />\n        <Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n        />\n        <Editor\n          language=\"javascript\"\n          displayName=\"Javascript\"\n          value={javascript}\n          onChange={setJavascript}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        ></iframe>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}